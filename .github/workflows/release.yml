name: Release scim_v2 crate

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Get version
        id: get_version
        run: echo "::set-output name=version::$(grep "^version" Cargo.toml | head -1 | awk -F' = ' '{print $2}' | sed 's/\"//g')"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Create tarball
        run: git archive --format=tar.gz --output=scim_v2_v${{ steps.get_version.outputs.version }}.tar.gz HEAD


      - name: Upload tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./scim_v2_v${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: scim_v2_v${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Create zip
        run: git archive --format=zip --output=scim_v2_v${{ steps.get_version.outputs.version }}.zip HEAD

      - name: Upload zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./scim_v2_v${{ steps.get_version.outputs.version }}.zip
          asset_name: scim_v2_v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
